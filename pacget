#!/bin/bash
# ##############################################################################
# ################################ pacget #####################################
# ##############################################################################
#            Copyright (c) 2017 Md. Jahidul Hamid
# 
# -----------------------------------------------------------------------------
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
# 
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
# 
#     * The names of its contributors may not be used to endorse or promote 
#       products derived from this software without specific prior written
#       permission.
#       
# Disclaimer:
# 
#     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#     AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#     IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#     ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
#     LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#     CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#     SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#     INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#     CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#     ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#     POSSIBILITY OF SUCH DAMAGE.
# ##############################################################################

version=1.0.5
pkgname=pacget



txtrst='\\e[0m'    # Text Reset
bldcyn='\\e[1;36m' # Cyan
bldgrn='\\e[1;32m' # Green
bldblu='\\e[1;34m' # Blue
bldwht='\\e[1;37m' # White
bldpur='\\e[1;35m' # Purple
bldylw='\\e[1;33m' # Yellow

third_bracket_color=$bldcyn
good_version_color=$bldgrn
bracket_text=$bldblu
package_name_color=$bldwht
repo_name_color=$bldpur
end_color=$txtrst
num_color=$bldylw

help="
#################################### $pkgname ####################################
############################ A wrapper around pacaur ###########################
################################################################################

Usage:
    $pkgname [operation] [options] [target/s]       #1
    $pkgname [packages_to_install]                  #2

All options works the same way as pacaur except the following:

  -s, --search <sterm>    : Search arch repo and AUR and interactive install
  -Ss, -S --search <sterm>: Search only arch repo and interactive install
  -Fs, -F --search <file> : Search for containing file and interactive install


All other options are forwarded to pacaur.

################################################################################
"

msg_out(){
	printf "*** $*\n" #> /dev/stdout
}

_star_s(){
    if [ "$1" = '' ]; then
        title='**********'
    else
        title=" ($1) "
    fi
    local s="************************$title*****************************"
    printf "\n\n\n*** $s\n"
}

_star_e(){
    local s='***************************************************************'
    printf "*** $s\n"
}

err_out(){
	printf "\nE: $*\n" >&2
}

wrn_out(){
	printf "\nW: $*\n" >&2
}

err_exit(){
	err_out "$*"
	exit 1
}

empty_var_exit(){
    # $1 -> msg
    # $2 -> var
    if [ "$2" = '' ]; then
        err_exit "$1"
    fi
}

chkroot(){
	if [ "$(id -u)" != "0" ]; then
	  err_out "root access required."
	  exit 1
	fi
}

chknorm(){
	if [ "$(id -u)" = "0" ]; then
	  wrn_out "Running as root not recommended. May produce some problems. Better run as a normal user."
	  return 1
	fi
}

chkcmd(){
    if command -v "$1" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}


declare -a args

search=false
search_term=
while [ $# -gt 0 ]
do
    i=$1
    j=$2
    if [[ "$i" = -h ]] || [[ "$i" = --help ]]; then
        args+=("$i")
        printf "%s\n" "$help"
    elif [[ "$i" = -v ]] || [[ "$i" = --version ]]; then
        args+=("$i")
        msg_out "pacget version: $version"
        msg_out "pacaur version: $(pacaur -v)"
        msg_out "pacman version: $(pacman --version)"
        exit 1
    elif [[ "$i" = -s ]] || [[ "$i" = --search ]]; then
        empty_var_exit "Search term not specified" "$j"
        search_term=$2
        search=true
        args+=("$i" "$j")
        shift
    elif [[ "$i" =~ ^-S(.*)s(.*)$ ]]; then
        empty_var_exit "Search term not specified" "$j"
        search_term=$j
        search=true
        pacman_S=set
        args+=("$i")
    elif [[ "$i" =~ ^-(.*)S(.*)$ ]]; then
        pacman_S=set
        args+=("$i")
    elif [[ "$i" =~ ^-F(.*)s(.*)$ ]]; then
        empty_var_exit "Search term not specified" "$j"
        search_term=$j
        search=true
        pacman_F=set
        args+=("$i")
    elif [[ "$i" =~ ^-(.*)F(.*)$ ]]; then
        pacman_F=set
        args+=("$i")
    else
        args+=("$i")
    fi
    shift
done

search_results=
if $search; then
    if [[ "$pacman_F" != set ]]; then
        search_results=$(pacman -Ss "$search_term")
    fi
    if [[ "$pacman_S" != set ]] && [[ "$pacman_F" != set ]]; then
        search_results="$(pacaur -s "$search_term")"$'\n'"$search_results"
    fi
    if [[ "$pacman_F" = set ]]; then
        search_results="$(pacaur "${args[@]}")"$'\n'"$search_results"
    fi
fi

if $search; then
    raw_indexed_search_results=$(echo "$search_results" | awk 'BEGIN {a=0} /^[a-zA-Z]+\// {a++; print "\n" a,$0; next;} {print $0;}')
    #echo "$raw_indexed_search_results"

    search_results=$(
        echo "$raw_indexed_search_results" |
        sed -r \
            -e "s#^([0-9]+[[:blank:]]+[^[:blank:]/]+/[^[:blank:]]+[*[:blank:]]*[^][]*)(\[[^][]+\])#\1$third_bracket_color\2$end_color #" \
            -e "s#^([0-9]+[[:blank:]]+[^[:blank:]/]+/[^[:blank:]]+[*[:blank:]]*[^()]*)(\([^()]+\))#\1$bracket_text\2$end_color #" \
            -e "s#^([0-9]+[[:blank:]]+[^[:blank:]/]+/[^[:blank:]]+[*[:blank:]]*)([^[:blank:]]+)#\1$good_version_color\2$end_color #" \
            -e "s#^([0-9]+[[:blank:]]+[^[:blank:]/]+/)([^[:blank:]]+)[*[:blank:]]*#\1$package_name_color\2$end_color #" \
            -e "s#^([0-9]+[[:blank:]]+)([^[:blank:]/]+)/#\1$repo_name_color\2$end_color/#" \
            -e "s#^([0-9]+)[[:blank:]]+#$num_color\1$end_color #" \
        )

    printf "$search_results"

    if [[ "$search_results" != '' ]]; then
        msg="\n
$bldylw==>$txtrst ${bldwht}Enter nÂ° of packages to be installed$txtrst
$bldylw==>$txtrst ${bldwht}(e.g., 1 2 3 or 1,2,3 or 1-3 or 3-1)$txtrst
$bldylw==>$txtrst ${bldwht}------------------------------------$txtrst
$bldylw==>$txtrst "
        msg=$(printf "$msg" | sed -r -e "s#.+#$bldwht&$end_color#")
        printf "$msg"
        read inp
        declare -a arr
        packs=
        arr=($(echo "$inp" |tr ',' '\n'))

        for p in "${arr[@]}"; do
            if [[ "$p" =~ ^[0-9]+$ ]]; then
                #echo "$p"
                packs+=" $(echo "$raw_indexed_search_results" | sed -r -n -e "s#^$p[[:blank:]]+[^/]+/([^[:blank:]]+).*#\1#p")"
            elif [[ "$p" =~ ^([0-9]+)[[:blank:]]*-[[:blank:]]*([0-9]+) ]]; then
                if [ ${BASH_REMATCH[1]} -gt ${BASH_REMATCH[2]} ]; then
                    lc=${BASH_REMATCH[2]}
                    uc=${BASH_REMATCH[1]}
                else
                    lc=${BASH_REMATCH[1]}
                    uc=${BASH_REMATCH[2]}
                fi
                for i in $(seq $lc $uc); do
                    packs+=" $(echo "$raw_indexed_search_results" | sed -r -n -e "s#^$i[[:blank:]]+[^/]+/([^[:blank:]]+).*#\1#p")"
                done
            else
                err_exit "Invalid range or sequence: $p"
            fi
        done
        if [[ "$packs" != '' ]]; then
            pacaur -S $packs
        fi
    fi
else
    # see if any options are passed
    for p in "${args[@]}"; do
        if [[ "$p" =~ ^-(.*)$ ]]; then
            option_passed=set
            break
        fi
    done
    if [[ "$option_passed" = set ]]; then
        pacaur "${args[@]}"
    else
        # If no option is passed, all will be taken as package names
        pacaur -S "${args[@]}"
    fi
fi
