#!/bin/bash

version=1.0.0
pkgname=arpi



txtrst='\\e[0m'    # Text Reset
bldcyn='\\e[1;36m' # Cyan
bldgrn='\\e[1;32m' # Green
bldblu='\\e[1;34m' # Blue
bldwht='\\e[1;37m' # White
bldpur='\\e[1;35m' # Purple
bldylw='\\e[1;33m' # Yellow

third_bracket_color=$bldcyn
good_version_color=$bldgrn
bracket_text=$bldblu
package_name_color=$bldwht
repo_name_color=$bldpur
end_color=$txtrst
num_color=$bldylw

help="
#################################### $pkgname ######################################
########################### Arch Package Installer #############################
################################################################################

All options works the same way as pacaur except the following:

    -s, --search        : search in both arch repo and AUR and selective install
    -s/x, --search/x    : Extensive search in arch repo and AUR and selective
                          install


All other options are forwarded to pacaur.

################################################################################
"

msg_out(){
	printf "*** $*\n" #> /dev/stdout
}

_star_s(){
    if [ "$1" = '' ]; then
        title='**********'
    else
        title=" ($1) "
    fi
    local s="************************$title*****************************"
    printf "\n\n\n*** $s\n"
}

_star_e(){
    local s='***************************************************************'
    printf "*** $s\n"
}

err_out(){
	printf "\nE: $*\n" >&2
}

wrn_out(){
	printf "\nW: $*\n" >&2
}

err_exit(){
	err_out "$*"
	exit 1
}

empty_var_exit(){
    # $1 -> msg
    # $2 -> var
    if [ "$2" = '' ]; then
        err_exit "$1"
    fi
}

chkroot(){
	if [ "$(id -u)" != "0" ]; then
	  err_out "root access required."
	  exit 1
	fi
}

chknorm(){
	if [ "$(id -u)" = "0" ]; then
	  wrn_out "Running as root not recommended. May produce some problems. Better run as a normal user."
	  return 1
	fi
}

chkcmd(){
    if command -v "$1" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}


declare -a args
declare -a cmds

search=false
search_term=
searchx=false
while [ $# -gt 0 ]
do
    case "$1" in
        -s|--search)
                empty_var_exit "Search term not specified" "$2"
                args+=("$1" "$2")
                search_term=$2
                search=true
                shift
                ;;
        -s/x|--search/x)
                empty_var_exit "Search term not specified" "$2"
                args+=("-s" "$2")
                search_term=$2
                searchx=true
                shift
                ;;
        -h|--help)
                args+=("$1")
                msg_out "$help"
                ;;
        -v|--version)
                args+=("$1")
                msg_out "$pkgname version:       $version"
                msg_out "pacaur version:    $(pacaur -v)"
                msg_out "pacman version:    $(pacman --version)"
                exit 1
                ;;
        *)
                args+=("$1")
                ;;
    esac
    shift
done


raw_search_results=
if $searchx; then
    search_results=$(
    sudo pkgfile -u
    pkgfile "$search_term"
    pacaur -s "$search_term"
    pacman -Ss "$search_term"
    )
elif $search; then
    search_results=$(
    pacaur -s "$search_term"
    pacman -Ss "$search_term"
    )
fi

if $search || $searchx; then
    raw_indexed_search_results=$(echo "$search_results" | awk 'BEGIN {a=0} /^[a-zA-Z]+\// {a++; print "\n" a,$0; next;} {print $0;}')
    #echo "$raw_indexed_search_results"

    search_results=$(
        echo "$raw_indexed_search_results" |
        sed -r \
            -e "s#^([0-9]+[[:blank:]]+[^[:blank:]/]+/[^[:blank:]]+[*[:blank:]]*[^][]*)(\[[^][]+\])#\1$third_bracket_color\2$end_color #" \
            -e "s#^([0-9]+[[:blank:]]+[^[:blank:]/]+/[^[:blank:]]+[*[:blank:]]*[^()]*)(\([^()]+\))#\1$bracket_text\2$end_color #" \
            -e "s#^([0-9]+[[:blank:]]+[^[:blank:]/]+/[^[:blank:]]+[*[:blank:]]*)([^[:blank:]]+)#\1$good_version_color\2$end_color #" \
            -e "s#^([0-9]+[[:blank:]]+[^[:blank:]/]+/)([^[:blank:]]+)[*[:blank:]]*#\1$package_name_color\2$end_color #" \
            -e "s#^([0-9]+[[:blank:]]+)([^[:blank:]/]+)/#\1$repo_name_color\2$end_color/#" \
            -e "s#^([0-9]+)[[:blank:]]+#$num_color\1$end_color #" \
        )

    printf "$search_results"

    if [[ "$search_results" != '' ]]; then
        msg="\n\n>>> Enter the sequence of packages to be installed.\nSeparate by comma (e.g 1,2,3) or provide by range (e.g 1-5): "
        msg=$(printf "$msg\n" | sed -r -e "s#.+#$bldwht&$end_color#")
        printf "$msg"
        read inp
        declare -a arr
        packs=
        arr=($(echo "$inp" |tr ',' '\n'))

        for p in "${arr[@]}"; do
            if [[ "$p" =~ ^[0-9]+$ ]]; then
                #echo "$p"
                packs+=" $(echo "$raw_indexed_search_results" | sed -r -n -e "s#^$p[[:blank:]]+[^/]+/([^[:blank:]]+).*#\1#p")"
            elif [[ "$p" =~ ^([0-9]+)[[:blank:]]*-[[:blank:]]*([0-9]+) ]]; then
                for i in $(seq ${BASH_REMATCH[1]} ${BASH_REMATCH[2]}); do
                    packs+=" $(echo "$raw_indexed_search_results" | sed -r -n -e "s#^$i[[:blank:]]+[^/]+/([^[:blank:]]+).*#\1#p")"
                done
            else
                err_exit "Invalid range or sequence: $p"
            fi
        done

        pacaur -Sy $packs
    fi
else
    pacaur "${args[@]}"
fi
